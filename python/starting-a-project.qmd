---
title: "Starting a new Python project"
---

## Links

-  The [Poetry documentation](https://python-poetry.org/docs/) explains how to install and use Poetry, a tool for managing Python project dependencies and packaging. It covers creating projects, adding libraries, handling virtual environments, and publishing packages.

## Git

Git can be initialised by running `git init` from your project directory.

Python projects should include a `.gitignore` file to exclude sensitive files, such as API keys or personal configurations, from being tracked by Git.

If your project contains data extracts which contain private or sensitive data, it is important that you add the folder which contains the data to the `.gitignore`.

A recommended `.gitignore` file for Python projects can be found [here](https://github.com/github/gitignore/blob/main/Python.gitignore). Ensure that sensitive files, such as `.env` files containing environment variables, are listed in a `.gitignore` to prevent them from being inadvertently shared or exposed.

## Reproducible Environments in Python

In Python, managing reproducible environments is crucial to ensure that projects remain organised and dependencies do not conflict with one another. This is achieved through the use of virtual environments, which create isolated environments for different projects.

A virtual environment is an isolated Python environment that allows you to manage dependencies for a specific project without interfering with other projects or the global Python installation. This isolation helps maintain consistency and reproducibility.

We recommend using [Poetry](https://python-poetry.org/docs/) for dependency management and reproducibility.

### Initialising a Project with Poetry

Navigate to your project directory and initialise a new Poetry project:

```sh
poetry init
```

Follow the prompts to set up your project configuration, which will generate a `pyproject.toml` file where Poetry manages your dependencies.

To add a package as a dependency:

```sh
poetry add <package_name>
```

To add a development dependency:

```sh
poetry add --dev <package_name>
```

Poetry automatically creates and manages a virtual environment for your project. To activate this environment, use:

```sh
poetry shell
```

To ensure reproducibility, commit the `poetry.lock` file generated by Poetry. This file captures the exact versions of all dependencies, allowing others to recreate the environment precisely.
